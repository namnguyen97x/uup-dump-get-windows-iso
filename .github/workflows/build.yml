name: build
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # chạy vào 0h sáng hàng ngày
jobs:
  setup:
    runs-on: windows-2022
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract matrix from PowerShell script
        id: set-matrix
        run: |
          $scriptContent = Get-Content 'uup-dump-get-windows-iso.ps1' -Raw
          # Find the TARGETS hashtable section more accurately
          $targetsPattern = '\$TARGETS\s*=\s*@\s*\{'
          $startMatch = [regex]::Match($scriptContent, $targetsPattern)
          if ($startMatch.Success) {
            $startPos = $startMatch.Index + $startMatch.Length
            $braceCount = 0
            $endPos = $startPos
            
            # Find the matching closing brace by counting nested braces
            for ($i = $startPos; $i -lt $scriptContent.Length; $i++) {
              $char = $scriptContent[$i]
              if ($char -eq '{') { $braceCount++ }
              elseif ($char -eq '}') { 
                $braceCount--
                if ($braceCount -eq 0) {
                  $endPos = $i
                  break
                }
              }
            }
            
            $targetsSection = $scriptContent.Substring($startPos, $endPos - $startPos)
            $targetNames = [regex]::Matches($targetsSection, '"([^"]+)"\s*=') | ForEach-Object { $_.Groups[1].Value }
            $matrix = $targetNames | ForEach-Object { @{ name = $_ } } | ConvertTo-Json -Compress
            Write-Output "matrix=$matrix" >> $env:GITHUB_OUTPUT
            Write-Host "Extracted matrix: $matrix"
          } else {
            Write-Error "Could not find TARGETS configuration in PowerShell script"
            exit 1
          }
  build:
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on: windows-2022
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Show available disk space before build
        run: Get-PSDrive -PSProvider FileSystem
      - name: Build
        run: pwsh uup-dump-get-windows-iso.ps1 ${{ matrix.name }} c:/output
      - name: Show available disk space after build
        run: Get-PSDrive -PSProvider FileSystem
      - name: Build summary
        run: |
          $iso = Get-Content (Resolve-Path c:/output/*.json) | ConvertFrom-Json
          Add-Content $env:GITHUB_STEP_SUMMARY @"
          | Property | Value |
          | :--- | :--- |
          | Name | $($iso.name) |
          | Build | $($iso.build) |
          | Checkum | $($iso.checksum) |
          $($iso.images | ForEach-Object {"| Image Name #$($_.index) | $($_.name) |"})
          | UUP dump | [$($iso.title)]($($iso.uupDump.downloadUrl)) |
          "@
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            c:/output/*.json
            c:/output/*.iso
            c:/output/*.iso.sha256.txt
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Release
    runs-on: ubuntu-22.04
    needs:
      - setup
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: output
      - name: Release notes
        run: |
          cat >release-notes.md <<EOF
          This is a useless release, because in a github release a single file
          size cannot be above 2GB and these iso files are 4GB+.

          See:

            * GitHub: [Storage and bandwidth quotas](https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases#storage-and-bandwidth-quotas)
            * Github: [Distributing large binaries](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#distributing-large-binaries)
            * ncipollo/release-action#110: [Artifacts over 2147483647 bytes do not get uploaded](https://github.com/ncipollo/release-action/issues/110)
          EOF
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: release-notes.md
          artifacts: output/*/*
          token: ${{ secrets.GITHUB_TOKEN }}
